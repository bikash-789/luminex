// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github-insights-dashboard/internal/biz"
	"github-insights-dashboard/internal/conf"
	"github-insights-dashboard/internal/data"
	"github-insights-dashboard/internal/server"
	"github-insights-dashboard/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

// Injectors from wire.go:

// wireApp wire app.
func wireApp(conf2 *conf.Bootstrap, logger log.Logger) (*kratos.App, func(), error) {
	string2 := provideToken(conf2)
	dataObj, cleanup, err := data.NewData(conf2, logger)
	if err != nil {
		return nil, nil, err
	}
	githubRepo := data.NewGithubRepo(string2, logger, dataObj)
	githubApp := biz.NewGithubApp(githubRepo, logger)
	luminexService := service.NewLuminexService(githubApp, logger)
	httpServer := server.NewHTTPServer(conf2, luminexService, logger)
	grpcServer := server.NewGRPCServer(conf2, luminexService, logger)
	app := newApp(logger, httpServer, grpcServer)
	return app, func() {
		cleanup()
	}, nil
}

// wire.go:

func provideToken(conf2 *conf.Bootstrap) string {
	return conf2.Github.Token
}
